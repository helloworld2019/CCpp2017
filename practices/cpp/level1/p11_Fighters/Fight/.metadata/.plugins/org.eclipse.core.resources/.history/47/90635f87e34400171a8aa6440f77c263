/*
 * EnemyFlight.h
 *
 *  Created on: 2017年5月28日
 *      Author: chen
 */

#ifndef ENEMYFLIGHT_H_
#define ENEMYFLIGHT_H_

#include"flight.h"
#include<time.h>
#include<stdlib.h>
#include<iostream>
#include<vector>

class EnemyFlight
{
public:
	EnemyFlight(sf::Texture globaltexture ):texture(globaltexture){

		number = 2 ;
		//number++;
		for(int i = 0 ; i<number; i++){
			E.push_back(new *Flight);
			E[i]->SetTexture(texture);
			E[i]->ankel();
			E[i]->SetPosiontion(rand()%500+300,200);

		}
	}

	int control(){
		int m = 0;
		sf::Mutex mutex ;
		mutex.lock();
		for(int i = 0 ;i < number;i++){
			m = m * 10 ;
			if(E[i]->control2()){
				m = m + i ;
			}
		}
		mutex.unlock();
		return m ;
	}
	int getnumber(){
		return number ;
	}

	void destory(){
		int k = 0;
		for(int j = 0;j < E.size();j++){
			if(!E[j]->getlive()){
				delete E[j];
				E[j] = NULL ;
				k=1;
			}
		}
		if(k==1){
			int i = 0;
			while(E.size()!=0||i<E.size()){
				if(E[i]==NULL){
					E.erase(E.begin()+i);
					i=0;
					continue;
				}
				i++;
			}
		}

	}

	std::vector<Flight*> E;
private:
	sf::Texture texture;
	int number ;
};




#endif /* ENEMYFLIGHT_H_ */
